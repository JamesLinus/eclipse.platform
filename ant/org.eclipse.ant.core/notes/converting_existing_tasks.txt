Ant Support

	The Eclipse Ant Support has changed in integration build 20020402. The main motivation for this change
was to provide an Ant user experience as similar as possible to what users get when using Ant through the
command line. Existing Ant scripts should run inside Eclipse as easy as they run outside and vice versa.


What has changed?

	+ The way Eclipse Ant Support computes the classpath has changed. This fixes the "could not find classic
	compiler" syndrome many existing Ant users get when using the Eclipse Ant Support 1.0 for the first time.
	The problem happens because tools.jar is not in the user classpath and is related to how Eclipse computes
	classpaths (based on its plug-in architecture).

	+ All the extension points for extending Ant functionality (tasks, types and objects) have been renamed.
	  This was done to emphasize things have changed and old implementations need to be rewritten.

	+ The plug-in org.eclipse.ant.core does not export org.apache.ant anymore. In fact, it does
	  not even require it anymore. Because of it some plug-ins might need to explicitly require
	  the plug-in org.apache.ant.

	+ When running Eclipse with a JDK (as oposed to a JRE), tools.jar is found and put in the classpath.
	
	+ (Near future) Users will be able to specify (through some UI) extra jars to put in the Ant classpath.
	
	+ (Near future) Users will be able to specify (through some UI) new tasks and types that will be available when
	  running the scripts.

	+ (Near future) Users will be able to choose what Ant version they want to run (the one provided by Eclipse will
	  continue as the default) by providing the location of the ant.jar or similar library.


What is necessary to do in order to port existing tasks?

	Basically, follow some rules:
	
	+ If contributing a new task, type or object, its class cannot be placed inside the runtime libraries
	  of the plug-in contributing them. It has to be placed in a separate jar and the jar has to be declared
	  in the new extension points (examples bellow).

	Old extension point:
    <extension point="org.eclipse.ant.core.antTasks">
      <antTask
         name="myTask"
         class="com.examples.MyTask">
      </antTask>
    </extension>

    <extension point="org.eclipse.ant.core.antObjects">
      <antObject
         name="com.examples.MyObject"
         class="com.examples.MyObject">
      </antObject>
    </extension>

    <extension point="org.eclipse.ant.core.antTypes">
      <antType
         name="myType"
         class="com.examples.MyType">
      </antType>
    </extension>
	
	
	New extension point:
    <extension point="org.eclipse.ant.core.tasks">
      <task
         name="myTask"
         class="com.examples.MyTask"
         library="lib/myjar.jar">
      </task>
    </extension>

    <extension point="org.eclipse.ant.core.objects">
      <object
         name="com.examples.MyObject"
         class="com.examples.MyObject"
         library="lib/myjar.jar">
      </object>
    </extension>

    <extension point="org.eclipse.ant.core.types">
      <type
         name="myType"
         class="com.examples.MyType"
         library="lib/myjar.jar">
      </type>
    </extension>
  

	As shown above, the "old way" does not specify a library because the class that defines the
object is supposed to be in one of the plug-in's runtime libraries. In the "new way" the class
cannot be in any runtime library and an extra "library" attribute is necessary in order to
specify where to find the declared object.
	
	
Understading the changes
	This section provides a brief description of why we chose the current solution. It does not add
anything if you just want to use Ant or write your own tasks. Might interest only people that want to
know what is going on under the covers.
	(...)